model WorkoutOfMesocycle {
  id            String         @id @default(cuid())
  workoutId     String         @unique
  mesocycleId   String
  splitDayName  String
  workoutStatus WorkoutStatus?
  workout       Workout        @relation(fields: [workoutId], references: [id])
  mesocycle     Mesocycle      @relation(fields: [mesocycleId], references: [id])
}

model Workout {
  id                 String              @id @default(cuid())
  name               String
  user               User                @relation(fields: [userId], references: [id])
  workoutOfMesocycle WorkoutOfMesocycle?
  createdAt          DateTime            @default(now())
  workoutExercises   WorkoutExercise[]
  userId             String
}

model WorkoutExercise {
  id                           String                @id @default(cuid())
  exerciseIndex                Int
  workout                      Workout               @relation(fields: [workoutId], references: [id])
  workoutId                    String
  targetMuscleGroup            MuscleGroup
  customMuscleGroup            String?
  involvesBodyweight           Boolean
  setData                      SetsOfWorkoutExercise @relation(fields: [setsOfWorkoutExerciseId], references: [id])
  note                         String?
  preferredProgressionVariable ProgressionVariable?
  overloadPercentage           Float?
  lastSetToFailure             Boolean?
  forceRIRMatching             Boolean?
  minimumWeightChange          Float?
  setsOfWorkoutExerciseId      String                @unique
}

model SetsOfWorkoutExercise {
  id                 String              @id @default(cuid())
  workoutExercise    WorkoutExercise?
  setType            SetType
  repRangeStart      Int
  repRangeEnd        Int
  straightSets       StraightSets?
  fixedChangeSets    FixedChangeSets?
  variableChangeSets VariableChangeSets?
  myorepMatchSets    MyorepMatchSets?
}

// Straight, Myorep
model StraightSets {
  id                      String                @id @default(cuid())
  load                    Int
  repNumbers              Int[]
  RIRNumbers              Int[]
  setsOfWorkoutExercise   SetsOfWorkoutExercise @relation(fields: [setsOfWorkoutExerciseId], references: [id])
  setsOfWorkoutExerciseId String                @unique
}

// Drop, Down, Top
model FixedChangeSets {
  id                      String                @id @default(cuid())
  loadNumbers             Int[]
  repNumbers              Int[]
  RIRNumbers              Int[]
  changeType              ChangeType
  changeAmount            Float
  setsOfWorkoutExercise   SetsOfWorkoutExercise @relation(fields: [setsOfWorkoutExerciseId], references: [id])
  setsOfWorkoutExerciseId String                @unique
}

// Giant, V2
model VariableChangeSets {
  id                      String                @id @default(cuid())
  loadNumbers             Int[]
  repNumbers              Int[]
  RIRNumbers              Int[]
  setsOfWorkoutExercise   SetsOfWorkoutExercise @relation(fields: [setsOfWorkoutExerciseId], references: [id])
  setsOfWorkoutExerciseId String                @unique
}

// MyorepMatch
model MyorepMatchSets {
  id                      String                @id @default(cuid())
  myorepMatchSets         MyorepMatchSet[]
  setsOfWorkoutExercise   SetsOfWorkoutExercise @relation(fields: [setsOfWorkoutExerciseId], references: [id])
  setsOfWorkoutExerciseId String                @unique
}

// No 2D arrays, need a seperate model to hold set info
model MyorepMatchSet {
  id                String           @id @default(cuid())
  repNumber         Int
  loadNumber        Int
  myoreps           Int[]
  myorepMatchSets   MyorepMatchSets? @relation(fields: [myorepMatchSetsId], references: [id])
  myorepMatchSetsId String?
}
