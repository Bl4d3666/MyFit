datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/zodSchemas"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  exerciseSplits ExerciseSplit[]
  Mesocycle      Mesocycle[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum MuscleGroup {
  Chest
  FrontDelts
  SideDelts
  RearDelts
  Lats
  Traps
  Triceps
  Biceps
  Forearms
  Quads
  Hamstrings
  Glutes
  Calves
  Abs
  Neck
  Adductors
  Abductors
  Custom
}

enum SetType {
  Straight
  Drop
  Down
  Top
  Myorep
  MyorepMatch
  Giant
  V2
}

enum ChangeType {
  Percentage
  AbsoluteLoad
}

model ExerciseSplit {
  id                String             @id @default(cuid())
  name              String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  exerciseSplitDays ExerciseSplitDay[]
  usedByMesocycles  Mesocycle[]
}

model ExerciseSplitDay {
  id              String             @id @default(cuid())
  name            String
  dayIndex        Int
  isRestDay       Boolean
  exercises       ExerciseTemplate[]
  exerciseSplit   ExerciseSplit      @relation(fields: [exerciseSplitId], references: [id], onDelete: Cascade)
  exerciseSplitId String
}

model ExerciseTemplate {
  id                 String           @id @default(cuid())
  name               String
  exerciseIndex      Int
  targetMuscleGroup  MuscleGroup
  customMuscleGroup  String?
  involvesBodyweight Boolean
  setType            SetType
  repRangeStart      Int
  repRangeEnd        Int
  changeType         ChangeType?
  changeAmount       Float?
  note               String?
  exerciseSplitDay   ExerciseSplitDay @relation(fields: [exerciseSplitDayId], references: [id], onDelete: Cascade)
  exerciseSplitDayId String
}

enum ProgressionVariable {
  Reps
  Load
}

model Mesocycle {
  id                           String                      @id @default(cuid())
  name                         String
  user                         User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                       String
  exerciseSplit                ExerciseSplit?              @relation(fields: [exerciseSplitId], references: [id])
  exerciseSplitId              String?
  RIRProgression               Int[]
  startDate                    DateTime?
  endDate                      DateTime?
  preferredProgressionVariable ProgressionVariable
  startOverloadPercentage      Float
  lastSetToFailure             Boolean
  forceRIRMatching             Boolean
  mesocycleExerciseSplitDays   MesocycleExerciseSplitDay[]
  mesocycleCyclicSetChanges    MesocycleCyclicSetChange[]
}

model MesocycleCyclicSetChange {
  id                   String      @id @default(cuid())
  mesocycle            Mesocycle   @relation(fields: [mesocycleId], references: [id], onDelete: Cascade)
  mesocycleId          String
  muscleGroup          MuscleGroup
  customMuscleGroup    String?
  regardlessOfProgress Boolean
  setIncreaseAmount    Int
  maxVolume            Int
}

model MesocycleExerciseSplitDay {
  id                         String                      @id @default(cuid())
  name                       String
  dayIndex                   Int
  isRestDay                  Boolean
  mesocycle                  Mesocycle                   @relation(fields: [mesocycleId], references: [id], onDelete: Cascade)
  mesocycleId                String
  mesocycleSplitDayExercises MesocycleExerciseTemplate[]
}

model MesocycleExerciseTemplate {
  id                           String                    @id @default(cuid())
  name                         String
  exerciseIndex                Int
  targetMuscleGroup            MuscleGroup
  customMuscleGroup            String?
  involvesBodyweight           Boolean
  sets                         Int
  setType                      SetType
  repRangeStart                Int
  repRangeEnd                  Int
  changeType                   ChangeType?
  changeAmount                 Float?
  note                         String?
  mesocycleExerciseSplitDay    MesocycleExerciseSplitDay @relation(fields: [mesocycleExerciseSplitDayId], references: [id], onDelete: Cascade)
  mesocycleExerciseSplitDayId  String
  preferredProgressionVariable ProgressionVariable?
  overloadPercentage           Float?
  lastSetToFailure             Boolean?
  forceRIRMatching             Boolean?
}
