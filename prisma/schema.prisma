datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  exerciseSplits ExerciseSplit[]
  Mesocycle      Mesocycle[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum MuscleGroup {
  Chest
  FrontDelts
  SideDelts
  RearDelts
  Lats
  Traps
  Triceps
  Biceps
  Forearms
  Quads
  Hamstrings
  Glutes
  Calves
  Abs
  Neck
  Adductors
  Abductors
  Custom
}

enum SetType {
  Straight
  Drop
  Down
  Top
  Myorep
  MyorepMatch
  Giant
  V2
}

enum ChangeType {
  Percentage
  AbsoluteLoad
}

model ExerciseSplit {
  id                Int                @id @default(autoincrement())
  name              String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  exerciseSplitDays ExerciseSplitDay[]
  usedByMesocycles  Mesocycle[]
}

model ExerciseSplitDay {
  id              Int                @id @default(autoincrement())
  name            String
  isRestDay       Boolean            @default(false)
  exercises       ExerciseTemplate[]
  exerciseSplit   ExerciseSplit      @relation(fields: [exerciseSplitId], references: [id], onDelete: Cascade)
  exerciseSplitId Int
}

model ExerciseTemplate {
  id                 Int              @id @default(autoincrement())
  name               String
  targetMuscleGroup  MuscleGroup
  customMuscleGroup  String?
  involvesBodyweight Boolean
  setType            SetType
  repRangeStart      Int
  repRangeEnd        Int
  changeType         ChangeType?
  changeAmount       Float?
  note               String?
  exerciseSplitDay   ExerciseSplitDay @relation(fields: [exerciseSplitDayId], references: [id], onDelete: Cascade)
  exerciseSplitDayId Int
}

enum ProgressionVariable {
  Reps
  Load
}

model Mesocycle {
  id                           Int                         @id @default(autoincrement())
  name                         String
  user                         User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                       String
  exerciseSplit                ExerciseSplit               @relation(fields: [exerciseSplitId], references: [id])
  exerciseSplitId              Int
  RIRProgression               Int[]
  startDate                    DateTime?
  endDate                      DateTime?
  preferredProgressionVariable ProgressionVariable
  startOverloadPercentage      Float
  lastSetToFailure             Boolean
  forceRIRMatching             Boolean
  mesocycleExerciseSplitDays   MesocycleExerciseSplitDay[]
  mesocycleCyclicSetChanges    MesocycleCyclicSetChanges[]
}

model MesocycleCyclicSetChanges {
  id                   Int         @id @default(autoincrement())
  mesocycle            Mesocycle   @relation(fields: [mesocycleId], references: [id])
  mesocycleId          Int
  muscleGroup          MuscleGroup
  regardlessOfProgress Boolean
  setIncreaseAmount    Int
}

model MesocycleExerciseSplitDay {
  id                         Int                         @id @default(autoincrement())
  name                       String
  isRestDay                  Boolean
  mesocycle                  Mesocycle                   @relation(fields: [mesocycleId], references: [id], onDelete: Cascade)
  mesocycleId                Int
  mesocycleSplitDayExercises MesocycleExerciseTemplate[]
}

model MesocycleExerciseTemplate {
  id                          Int                       @id @default(autoincrement())
  name                        String
  targetMuscleGroup           MuscleGroup
  customMuscleGroup           String?
  involvesBodyweight          Boolean
  sets                        Int
  setType                     SetType
  repRangeStart               Int
  repRangeEnd                 Int
  changeType                  ChangeType?
  changeAmount                Float?
  note                        String?
  mesocycleExerciseSplitDay   MesocycleExerciseSplitDay @relation(fields: [mesocycleExerciseSplitDayId], references: [id], onDelete: Cascade)
  mesocycleExerciseSplitDayId Int
}
