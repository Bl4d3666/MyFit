name: CI Pipeline

env:
  AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

on:
  push:
    branches:
      - main
      - master
      - v3
  pull_request_target:
    branches:
      - main
      - master
      - v3

jobs:
  test:
    name: Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci --force # TODO: Remove force later
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx playwright test
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  svelte-check:
    name: Svelte Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci --force # TODO: Remove force later

      - name: Run Svelte Check
        id: svelte-check
        run: |
          set -o pipefail
          npx svelte-check --output machine > svelte-check-output.txt || true
          tail -n 1 svelte-check-output.txt > svelte-check-summary.txt
          cat svelte-check-summary.txt

      - name: Parse Svelte Check Output
        id: parse-output
        run: |
          SUMMARY=$(cat svelte-check-summary.txt)
          ERRORS=$(echo $SUMMARY | awk '{print $5}')
          WARNINGS=$(echo $SUMMARY | awk '{print $7}')
          FILES_WITH_PROBLEMS=$(echo $SUMMARY | awk '{print $9}')

          echo "errors=$ERRORS" >> $GITHUB_ENV
          echo "warnings=$WARNINGS" >> $GITHUB_ENV
          echo "files_with_problems=$FILES_WITH_PROBLEMS" >> $GITHUB_ENV

      - name: Check for errors, warnings, or files with problems
        if: env.errors != '0' || env.warnings != '0' || env.files_with_problems != '0'
        run: |
          echo "Svelte check failed with ${{ env.errors }} errors, ${{ env.warnings }} warnings, and ${{ env.files_with_problems }} files with problems."
          exit 1

      - name: Svelte check passed
        if: env.errors == '0' && env.warnings == '0' && env.files_with_problems == '0'
        run: echo "Svelte check passed with 0 errors, warnings, and files with problems."
